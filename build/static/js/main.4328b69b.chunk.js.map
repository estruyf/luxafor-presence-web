{"version":3,"sources":["models/Availability.ts","models/TimeType.ts","constants/auth-utils.tsx","components/Authenticator/AuthProvider.tsx","services/Luxafor.tsx","services/PresenceContext.ts","components/Header/Header.tsx","components/Footer/Footer.tsx","components/LuxaforPresence/LuxaforPresence.tsx","helpers/TimeHelpers.ts","components/App/App.tsx","components/App/index.ts","models/index.ts","serviceWorker.ts","index.tsx"],"names":["Availability","TimeType","fetchMsGraph","url","accessToken","a","fetch","headers","Authorization","response","json","isIE","ua","window","navigator","userAgent","msie","indexOf","msie11","GRAPH_ENDPOINTS","GRAPH_REQUESTS","LOGIN","scopes","PRESENCE","msalApp","UserAgentApplication","auth","clientId","authority","validateAuthority","postLogoutRedirectUri","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","system","navigateFrameWait","logger","error","console","errorPii","info","log","infoPii","verbose","verbosePii","warning","warn","warningPii","useRedirectFlow","Luxafor","deviceId","presence","color","Available","AvailableIdle","Away","BeRightBack","Busy","BusyIdle","DoNotDisturb","Offline","PresenceUnknown","body","userId","actionFields","custom_color","method","JSON","stringify","data","ok","name","localStorage","getItem","value","setItem","defaultContextValues","getDeviceSetting","refreshNr","startTime","endTime","overwrittenPresence","PresenceContext","React","createContext","Header","props","deviceChange","newIdInput","target","updateDeviceId","refreshChange","updateRefresh","parseInt","this","account","onSignIn","onSignOut","updateTime","context","className","Container","fixed","Grid","container","style","flexGrow","spacing","item","xs","Button","onClick","variant","userName","TextField","label","required","onChange","type","inputProps","min","max","step","pattern","e","StartTime","EndTime","Component","contextType","Footer","href","title","LuxaforPresence","handleChange","event","overwritePresense","Consumer","backgroundColor","Select","Object","keys","map","key","MenuItem","splitHours","time","includes","daySplit","split","hour","minutes","C","theme","createMuiTheme","palette","overrides","MuiSelect","select","fontSize","App","refreshTimer","setState","prevState","setDeviceSetting","startPresenceCheck","acquireToken","token","message","availability","setColor","state","stopPresenceCheck","startDataFetching","prevProps","startTimeSplit","endTimeSplit","crntDate","Date","statusMsg","statusColor","getHours","getMinutes","doCheck","setTimeout","clearTimeout","Provider","ThemeProvider","AppWithAuth","authCalled","handleRedirectCallback","errorMessage","getAccount","request","redirect","acquireTokenSilent","errorCode","length","acquireTokenRedirect","acquireTokenPopup","loginRedirect","loginPopup","catch","loginResponse","logout","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4328b69b.chunk.js","sourcesContent":["export enum Availability {\n  Available = \"Available\", \n  AvailableIdle = \"AvailableIdle\", \n  Away = \"Away\", \n  BeRightBack = \"BeRightBack\", \n  Busy = \"Busy\",\n  BusyIdle = \"BusyIdle\", \n  DoNotDisturb = \"DoNotDisturb\", \n  Offline = \"Offline\",\n  PresenceUnknown = \"PresenceUnknown\"\n}","\n\nexport enum TimeType {\n  StartTime = 1,\n  EndTime\n}","import { UserAgentApplication, Configuration } from \"msal\";\n\nexport const requiresInteraction = (errorMessage: any) => {\n  if (!errorMessage || !errorMessage.length) {\n    return false;\n  }\n  \n  return (\n    errorMessage.indexOf(\"consent_required\") > -1 ||\n    errorMessage.indexOf(\"interaction_required\") > -1 ||\n    errorMessage.indexOf(\"login_required\") > -1\n  );\n};\n  \nexport const fetchMsGraph = async (url: string, accessToken: string) => {\n  const response = await fetch(url, {\n    headers: {\n      Authorization: `Bearer ${accessToken}`\n    }\n  });\n  \n  return response.json();\n};\n  \nexport const isIE = (): boolean => {\n  const ua = window.navigator.userAgent;\n  const msie = ua.indexOf(\"MSIE \") > -1;\n  const msie11 = ua.indexOf(\"Trident/\") > -1;\n  \n  // If you as a developer are testing using Edge InPrivate mode, please add \"isEdge\" to the if check\n  // const isEdge = ua.indexOf(\"Edge/\") > -1;\n  \n  return msie || msie11;\n};\n  \nexport const GRAPH_SCOPES = {\n  OPENID: \"openid\",\n  PROFILE: \"profile\",\n  USER_READ: \"User.Read\",\n  PRESENCE_READ: \"Presence.Read\"\n};\n  \nexport const GRAPH_ENDPOINTS = {\n  ME: \"https://graph.microsoft.com/v1.0/me\",\n  PRESENCE: \"https://graph.microsoft.com/beta/me/presence\"\n};\n  \nexport const GRAPH_REQUESTS = {\n  LOGIN: {\n    scopes: [\n      GRAPH_SCOPES.OPENID,\n      GRAPH_SCOPES.PROFILE,\n      GRAPH_SCOPES.USER_READ\n    ]\n  },\n  PRESENCE: {\n    scopes: [GRAPH_SCOPES.PRESENCE_READ]\n  }\n};\n  \nexport const msalApp = new UserAgentApplication({\n  auth: {\n    clientId: \"66204339-daf1-40fa-aa31-57342272edce\",\n    authority: \"https://login.microsoftonline.com/common\",\n    validateAuthority: true,\n    postLogoutRedirectUri: \"https://luxafor-presence.azurewebsites.net\",\n    navigateToLoginRequestUrl: false\n  },\n  cache: {\n    cacheLocation: \"sessionStorage\",\n    storeAuthStateInCookie: isIE()\n  },\n  system: {\n    navigateFrameWait: 0,\n    logger: {\n      error: console.error,\n      errorPii: console.error,\n      info: console.log,\n      infoPii: console.log,\n      verbose: console.log,\n      verbosePii: console.log,\n      warning: console.warn,\n      warningPii: console.warn\n    }\n  }\n} as Configuration);","import React, { Component } from \"react\";\nimport {\n  msalApp,\n  requiresInteraction,\n  fetchMsGraph,\n  isIE,\n  GRAPH_ENDPOINTS,\n  GRAPH_REQUESTS\n} from \"../../constants\";\nimport { Presence } from \"../../models\";\nimport { AuthProviderProps, AuthProviderState } from '.';\n\n// If you support IE, our recommendation is that you sign-in using Redirect APIs\nconst useRedirectFlow = isIE();\n// const useRedirectFlow = true;\n\nexport default (C: any) => class AuthProvider extends Component<AuthProviderProps, AuthProviderState> {\n  private authCalled: boolean = false;\n  \n  constructor(props: AuthProviderProps) {\n    super(props);\n    \n    this.state = {\n      account: null,\n      error: null,\n      presence: null\n    };\n  }\n\n  /**\n   * componentDidMount lifecycle hook\n   */\n  public async componentDidMount() {\n    msalApp.handleRedirectCallback((error: any) => {\n      if (error) {\n        const errorMessage = error.errorMessage ? error.errorMessage : \"Unable to acquire access token.\";\n        // setState works as long as navigateToLoginRequestUrl: false\n        this.setState({\n          error: errorMessage\n        });\n      }\n    });\n    \n    const account = msalApp.getAccount();\n    \n    this.setState({\n      account\n    });\n  }\n  \n  /**\n   * Acquire token\n   * \n   * @param request \n   * @param redirect \n   */\n  public async acquireToken(request: any, redirect?: boolean) {\n    try {\n      return await msalApp.acquireTokenSilent(request);\n    } catch (error) {\n      // Call acquireTokenPopup (popup window) in case of acquireTokenSilent failure\n      // due to consent or interaction required ONLY\n      if (requiresInteraction(error.errorCode)) {\n        return redirect ? msalApp.acquireTokenRedirect(request) : msalApp.acquireTokenPopup(request);\n      } else {\n        console.error('Non-interactive error:', error.errorCode)\n      }\n    }\n  }\n  \n  /**\n   * Sign in the user\n   * \n   * @param redirect \n   */\n  public async onSignIn(redirect: boolean) {\n    if (this.authCalled) {\n      return;\n    }\n\n    this.authCalled = true;\n\n    if (redirect) {\n      return msalApp.loginRedirect(GRAPH_REQUESTS.PRESENCE);\n    }\n    \n    const loginResponse = await msalApp.loginPopup(GRAPH_REQUESTS.PRESENCE).catch(error => {\n      this.setState({\n        error: error.message\n      });\n    });\n\n    if (loginResponse) {\n      this.setState({\n        account: loginResponse.account,\n        error: null\n      });\n    }\n  }\n     \n  /**\n   * Sign out the user\n   */\n  public onSignOut() {\n    msalApp.logout();\n  }\n\n  \n\n  public getAccessToken(): string {\n    return \"\";\n  }\n      \n  /**\n   * Render the authentication component as a wrapper for the APP\n   */\n  render() {\n    return (\n      <C {...this.props}\n         account={this.state.account}\n         error={this.state.error}\n         presence={this.state.presence}\n         onSignIn={() => this.onSignIn(useRedirectFlow)}\n         onSignOut={() => this.onSignOut()}\n         acquireToken={this.acquireToken} />\n    );\n  }\n};","import { Availability } from \"../models\";\n\nexport const DEFAULT_COLOR = \"000000\";\nexport const API_URL = \"/api/setColor\";\n\nexport const KEY_DEVICE_ID = \"Device:ID\";\nexport const KEY_REFRESH_NR = \"RefreshNr\";\nexport const KEY_START_TIME = \"StartTime\";\nexport const KEY_END_TIME = \"EndTime\";\n\nexport class Luxafor {\n\n  public static async setColor(deviceId: string, presence: string): Promise<string> {\n    let color: string = DEFAULT_COLOR;\n\n    if (!deviceId || !presence) {\n      return color;\n    }\n    \n    switch(presence) {\n      case Availability.Available:\n      case Availability.AvailableIdle:\n        color = \"008000\";\n        break;\n      case Availability.Away:\n      case Availability.BeRightBack:\n        color = \"B2B200\";\n        break;\n      case Availability.Busy:\n      case Availability.BusyIdle:\n      case Availability.DoNotDisturb:\n        color = \"990000\";\n        break;\n      case Availability.Offline:\n      case Availability.PresenceUnknown:\n      default:\n        color = DEFAULT_COLOR;\n        break;\n    }\n\n    const body = {\n      userId: deviceId,\n      actionFields: {\n        color: \"custom\",\n        custom_color: color\n      }\n    };\n\n    const data = await fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accept\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n\n    if (data && data.ok) {\n      return color;\n    } else {\n      return DEFAULT_COLOR;\n    }\n  }\n\n  public static getDeviceSetting<T>(name: string): T | string {\n    if (localStorage) {\n      return localStorage.getItem(`Luxafor:${name}`) || \"\";\n    }\n    return \"\";\n  }\n\n  public static setDeviceSetting(name: string, value: any): void {\n    if (localStorage) {\n      localStorage.setItem(`Luxafor:${name}`, value);\n    }\n  }\n}","import React, { useState } from 'react';\nimport { Luxafor, KEY_DEVICE_ID, KEY_REFRESH_NR, KEY_START_TIME, KEY_END_TIME, DEFAULT_COLOR } from \".\";\nimport { AppState } from \"../components/App\";\n\nexport const defaultContextValues = {\n  deviceId: Luxafor.getDeviceSetting<string>(KEY_DEVICE_ID),\n  refreshNr: Luxafor.getDeviceSetting<number>(KEY_REFRESH_NR) as number || 2,\n  startTime: Luxafor.getDeviceSetting<string>(KEY_START_TIME),\n  endTime: Luxafor.getDeviceSetting<string>(KEY_END_TIME),\n  presence: \"\",\n  overwrittenPresence: null,\n  color: DEFAULT_COLOR\n} as AppState;\n\nexport const PresenceContext = React.createContext(defaultContextValues);","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Settings from '@material-ui/icons/Settings';\nimport Grid from '@material-ui/core/Grid';\nimport { Account } from \"msal\";\nimport './Header.css';\nimport { PresenceContext } from '../../services/PresenceContext';\nimport { AppState } from '../App';\nimport { TimeType } from '../../models';\n\nexport interface HeaderProps {\n  account: Account | null;\n\n  onSignIn: () => void;\n  onSignOut: () => void;\n  updateRefresh: (refreshNr: number) => void;\n  updateDeviceId: (deviceId: string) => void;\n  updateTime: (name: TimeType, time: string) => void;\n}\n\nexport interface HeaderState {\n  deviceId: string;\n}\n\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  \n  constructor(props: HeaderProps) {\n    super(props);\n  }\n\n  private deviceChange = (newIdInput: React.ChangeEvent<HTMLInputElement>) => {\n    if (newIdInput && newIdInput.target && newIdInput.target.value) {\n      this.props.updateDeviceId(newIdInput.target.value);\n    }\n  };\n\n  private refreshChange = (newIdInput: React.ChangeEvent<HTMLInputElement>) => {\n    if (newIdInput && newIdInput.target && newIdInput.target.value) {\n      this.props.updateRefresh(parseInt(newIdInput.target.value));\n    }\n  };\n\n  public render(): React.ReactElement<HeaderProps> {\n    const { account, onSignIn, onSignOut, updateTime } = this.props;\n    const { deviceId, refreshNr, startTime, endTime } = this.context as AppState;\n\n    return (\n      <header className=\"app__header\">\n        {\n        !account ? (\n          <Button onClick={onSignIn} variant=\"outlined\" color=\"primary\">Sign In</Button>\n        ) : (\n          <Container fixed>\n            <Grid container style={{flexGrow:1}} spacing={1}>\n              <Grid item xs={12}>\n                <Button onClick={onSignOut} variant=\"outlined\" color=\"secondary\">Sign Out: {account.userName}</Button>\n              </Grid>\n              <Grid className=\"app__header__inputs\" container>\n                <Grid item xs={3}>\n                  <TextField label=\"Device ID\" \n                            variant=\"filled\" \n                            required\n                            value={deviceId}\n                            onChange={this.deviceChange} />\n                </Grid>\n                <Grid item xs={3}>\n                  <TextField label=\"Refresh time (minutes)\" \n                            variant=\"filled\"\n                            value={refreshNr ? refreshNr : \"\"}\n                            type=\"number\"\n                            inputProps={{ min: \"1\", max: \"10\", step: \"1\" }}\n                            onChange={this.refreshChange} />\n                </Grid>\n                <Grid item xs={3}>\n                  <TextField label=\"Start time\" \n                            variant=\"filled\"\n                            value={startTime}\n                            inputProps={{\n                              pattern: \"([01]?[0-9]|2[0-3]):[0-5][0-9]\"\n                            }}\n                            onChange={e => updateTime(TimeType.StartTime, e.target.value)} />\n                </Grid>\n                <Grid item xs={3}>\n                  <TextField label=\"End time\" \n                            variant=\"filled\"\n                            value={endTime}\n                            inputProps={{\n                              pattern: \"([01]?[0-9]|2[0-3]):[0-5][0-9]\"\n                            }}\n                            onChange={e => updateTime(TimeType.EndTime, e.target.value)} />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Container>\n        )}\n      </header>\n    );\n  }\n}\n\nHeader.contextType = PresenceContext;\n\nexport default Header;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Account } from \"msal\";\nimport './Footer.css';\nimport GitHub from '@material-ui/icons/GitHub';\nimport Copyright from '@material-ui/icons/Copyright';\n\nexport interface FooterProps {}\n\nexport const Footer = (props: FooterProps) => {\n  \n  return (\n    <footer className=\"app__footer\">\n      <Button href=\"https://www.eliostruyf.com\" title=\"Go to the website of Elio Struyf\">Copyright <Copyright /> Elio Struyf - https://www.eliostruyf.com</Button> - <Button href=\"https://github.com/estruyf\" className=\"app__footer_github\"><GitHub /></Button>\n    </footer>\n  );\n};","import React from 'react';\nimport { Account } from \"msal\";\nimport './LuxaforPresence.css';\nimport { PresenceContext } from '../../services/PresenceContext';\nimport { Availability } from '../../models';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Button } from '@material-ui/core';\n\nexport interface LuxafoPresenceProps {\n  overwritePresense: (presense: string | null)  => void;\n}\n\nexport const LuxaforPresence = (props: LuxafoPresenceProps) => {\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    props.overwritePresense(event.target.value as string);\n  };\n  \n  return (\n    <PresenceContext.Consumer>\n      {\n        info => {\n          let color = `#282c34`;\n          switch (info.overwrittenPresence || info.presence) {\n            case Availability.Available:\n            case Availability.AvailableIdle:\n              color = `#58BC82`;\n              break;\n            case Availability.Busy:\n            case Availability.BusyIdle:\n            case Availability.DoNotDisturb:\n              color = `#6F1A07`;\n              break;\n            case Availability.Away:\n            case Availability.BeRightBack:\n              color = `#F6AE2D`;\n              break;\n            default: \n              color = `#282c34`;\n              break;\n          }\n\n          return (\n            <main className=\"app__main\" style={{\n              backgroundColor: `${color}`\n            }}>\n              <h1>Luxafor - Presence</h1>\n              {\n                (info.overwrittenPresence || info.presence) && (\n                  <>\n                    <Select value={info.overwrittenPresence || info.presence} onChange={handleChange} title=\"Manually select a presence status\">\n                      {\n                        Object.keys(Availability).map(key => (\n                          <MenuItem value={key}>{key}</MenuItem>\n                        ))\n                      }\n                    </Select>\n\n                    {\n                      info.overwrittenPresence && <Button className=\"app__main__reset\" variant=\"outlined\" color=\"secondary\" title=\"Reset the presence status. This will restart the automatic refresh.\" onClick={() => props.overwritePresense(null)}>Reset presence</Button>\n                    }\n                  </>\n                )\n              }\n            </main>\n          );\n        }\n      }\n    </PresenceContext.Consumer>\n  );\n};","\nexport const splitHours = (time: string): { hour: number, minutes: number} | null => {\n  if (time && time.includes(\":\")) {\n    const daySplit = time.split(\":\");\n    return {\n      hour: parseInt(daySplit[0]),\n      minutes: parseInt(daySplit[1])\n    }\n  }\n\n  return null;\n}","import React from 'react';\nimport './App.css';\nimport AuthProvider from '../Authenticator/AuthProvider';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport Header from '../Header/Header';\nimport { Footer } from '../Footer';\nimport { AppProps, AppState } from '.';\nimport { Luxafor, KEY_REFRESH_NR, KEY_DEVICE_ID } from '../../services';\nimport { LuxaforPresence } from '../LuxaforPresence';\nimport { defaultContextValues, PresenceContext } from '../../services/PresenceContext';\nimport { TimeType, Presence, Availability } from '../../models';\nimport { GRAPH_REQUESTS, fetchMsGraph, GRAPH_ENDPOINTS } from '../../constants';\nimport { splitHours } from '../../helpers/TimeHelpers';\n\n/**\n * TODO:\n * - Manual or automated work\n */\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark'\n  },\n  overrides: {\n    MuiSelect: {\n      select: {\n        fontSize: \"calc(10px + 2vmin)\"\n      }\n    }\n  }\n});\n\nclass App extends React.Component<AppProps, AppState> {\n  private refreshTimer: any;\n  \n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      ...defaultContextValues\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.account && this.state.deviceId && this.state.refreshNr) {\n      this.startDataFetching();\n    }\n  }\n\n  componentDidUpdate(prevProps: AppProps, prevState: AppState) {\n    if (prevState.refreshNr !== this.state.refreshNr ||\n        prevState.startTime !== this.state.startTime ||\n        prevState.endTime !== this.state.endTime) {\n      this.startDataFetching();\n    }\n\n    if (prevProps.account !== this.props.account && this.props.account) {\n      this.startDataFetching();\n    }\n\n    if (!this.props.account) {\n      this.stopPresenceCheck();\n    }\n  }\n\n  private updateDeviceId = (deviceId: string): void => {\n    this.setState((prevState: AppState) => {\n      const cloned = {...prevState};\n      cloned.deviceId = deviceId;\n      Luxafor.setDeviceSetting(KEY_DEVICE_ID, deviceId);\n      return {\n        ...prevState,\n        deviceId\n      };\n    });\n  };\n\n  private updateRefresh = (refreshNr: number): void => {\n    this.setState((prevState: AppState) => {\n      Luxafor.setDeviceSetting(KEY_REFRESH_NR, refreshNr);\n      return {\n        ...prevState,\n        refreshNr\n      };\n    });\n  };\n\n  private updateTime = (name: TimeType, time: string) => {\n    if (name && time) {\n      Luxafor.setDeviceSetting(TimeType[name], time);\n      if (name === TimeType.StartTime) {\n        this.setState({\n          startTime: time\n        });\n      } else {\n        this.setState({\n          endTime: time\n        });\n      }\n    }\n  };\n\n  /**\n   * Start fetching the data\n   */\n  private startDataFetching() {\n    const { deviceId, startTime, endTime, refreshNr } = this.state;\n\n    const startTimeSplit = splitHours(startTime);\n    const endTimeSplit = splitHours(endTime);\n    const crntDate = new Date();\n    let statusMsg: string | null = null;\n    let statusColor: string | null = null;\n\n    if (startTimeSplit && (crntDate.getHours() < startTimeSplit.hour || crntDate.getHours() === startTimeSplit.hour && crntDate.getMinutes() < startTimeSplit.minutes)) {\n      statusMsg = Availability.Offline;\n      statusColor = \"000000\";\n    }\n\n    if (endTimeSplit && (crntDate.getHours() > endTimeSplit.hour || crntDate.getHours() === endTimeSplit.hour && crntDate.getMinutes() > endTimeSplit.minutes)) {\n      statusMsg = Availability.Offline;\n      statusColor = \"000000\";\n    }\n\n    let doCheck = true;\n    if (statusMsg) {\n      // Only update if needed\n      if (statusMsg !== this.state.presence) {\n        Luxafor.setColor(deviceId, Availability.Offline);\n        this.setState({\n          presence: statusMsg as string,\n          color: statusColor as string\n        });\n      }\n      doCheck = false;\n    }\n\n    if (doCheck) {\n      this.startPresenceCheck();\n    }\n\n    if (refreshNr) {\n      this.refreshTimer = setTimeout(() => {\n        this.startDataFetching();\n      }, refreshNr * 60 * 1000);\n    }\n  }\n\n  /**\n   * Start checking the user its presence\n   */\n  private startPresenceCheck = async () => {\n    const { acquireToken } = this.props;\n\n    try {\n      let token;\n\n      try {\n        token = await acquireToken(GRAPH_REQUESTS.PRESENCE);\n      } catch (error) {\n        this.setState({\n          error: error.message\n        });\n        return;\n      }\n\n      if (token) {\n        const presence: Presence = await fetchMsGraph(GRAPH_ENDPOINTS.PRESENCE, token.accessToken);\n        if (presence && presence.availability) {\n          const color = await Luxafor.setColor(this.state.deviceId, presence.availability);\n          this.setState({\n            presence: presence.availability,\n            color\n          });\n        }\n      }\n    } catch (error) {\n      this.setState({\n        error: \"Unable to fetch Graph profile.\"\n      });\n    }\n  }\n\n  private stopPresenceCheck() {\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n      this.refreshTimer = null;\n    }\n  }\n\n  private overwritePresense = async (presence: string | null = null): Promise<void> => {\n    if (presence) {\n      debugger;\n      this.stopPresenceCheck();\n      const color = await Luxafor.setColor(this.state.deviceId, presence as string);\n      this.setState({\n        color\n      });\n    } else {\n      this.startDataFetching();\n    }\n\n    this.setState({\n      overwrittenPresence: presence\n    });\n  }\n\n  public render(): React.ReactElement<AppProps> {\n    return (\n      <PresenceContext.Provider value={{\n        ...this.state,\n        error: \"\"\n      }}>\n        <ThemeProvider theme={theme}>\n          <div className=\"app\">\n            <Header account={this.props.account}\n                    onSignIn={this.props.onSignIn} \n                    onSignOut={this.props.onSignOut}\n                    updateRefresh={this.updateRefresh}\n                    updateDeviceId={this.updateDeviceId}\n                    updateTime={this.updateTime} />\n  \n            <LuxaforPresence overwritePresense={this.overwritePresense} />\n\n            {\n              this.state.error && <p className=\"app__error\">{this.state.error}</p>\n            }\n  \n            <Footer />\n          </div>\n        </ThemeProvider>\n      </PresenceContext.Provider>\n    );\n  }\n}\n\nexport const AppWithAuth = AuthProvider(App);","export * from './App';\nexport * from './AppProps';\nexport * from './AppState';\n","export * from './Availability';\nexport * from './Presence';\nexport * from './TimeType';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { AppWithAuth } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppWithAuth />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}